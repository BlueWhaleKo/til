// 11.2 테스트 실행 제어하기
// cargo test 명령은 테스트 모드의 코드를 컴파일하고 결과 테스트 바이너리를 실행한다.

// cargo test 명령이 생성하는 바이너리의 기본 동작은 모든 테스트를 병렬로 실행
// 테스트가 실행되는 동안 결과를 한곳에 모은 후, 보기 쉽게 꾸며서 한번에 보여준다.

// 11.2.1 테스트를 병렬 혹은 직렬로 실행하기
// 여러 개의 테스트를 실행할 때는 기본적으로 스레드(thread)를 이용해 병렬(parallel)로 실행한다.

// 각 테스트는 현재 작업 디렉토리나 환경 변수 등,
// 공통적으로 적용되는 환경을 포함한 공유상태(shared state)에 대해 독립적이어야 한다.
// cargo test -- --test-threads=1 => 모든 테스트를 하나의 스레드에서 직렬로 실행

// 11.2.2 함수의 결과 보여주기
// 테스트 출력기는 함수 내에서 실행되는 println! 등의 매크로 출력을 가로챈다. (성공하면 안보여줌)
// --nocapture 플래그를 지정하면 테스트 출력기가 사용자가 지정한 출력을 가로채지 못하게 설정할 수 있다.

// 11.2.3 이름을 이용해 테스트 일부만 실행하기
// 함수 이름을 전달 : 일치하는 테스트 함수만 실행
// 함수 이름의 일부만 전달 : 전달한 이름을 포함하는 테스트 함수 모두 실행

// 11.2.4 명시적으로 요청하지 않은 테스트 제외하기
// 오래 걸리는 테스트와 같이 매번 실행하기 곤란한 테스트는 #[ignore]
// 제외된 테스트만 실행하고 싶다면 , --ignored 플래그 설정
#[test]
fn it_works() {
    assert_eq!(2 + 2, 4);
}

#[test]
#[ignore]
fn expensive_test() {
    loop {
        let a = 2;
    }
    assert_eq!(2 + 2, 4)
}
