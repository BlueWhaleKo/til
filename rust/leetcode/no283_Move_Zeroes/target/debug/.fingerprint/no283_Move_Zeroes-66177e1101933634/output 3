{"message":"can't compare `[i32]` with `std::vec::Vec<i32>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::core::macros::assert_eq macros>","byte_start":153,"byte_end":155,"line_start":7,"line_end":7,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"             if ! (* left_val == * right_val)","highlight_start":31,"highlight_end":33}],"label":"no implementation for `[i32] == std::vec::Vec<i32>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":711,"byte_end":771,"line_start":36,"line_end":36,"column_start":9,"column_end":69,"is_primary":false,"text":[{"text":"        assert_eq!(*Solution::move_zeroes_1(&mut input()), output())","highlight_start":9,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":940,"line_start":1,"line_end":36,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"($ left : expr, $ right : expr) =>","highlight_start":1,"highlight_end":35},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& $ left, & $ right)","highlight_start":1,"highlight_end":33},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#,","highlight_start":1,"highlight_end":18},{"text":"                  & * left_val, & * right_val)","highlight_start":1,"highlight_end":47},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ; ($ left : expr, $ right : expr,) =>","highlight_start":1,"highlight_end":42},{"text":"({ $ crate :: assert_eq ! ($ left, $ right) }) ;","highlight_start":1,"highlight_end":49},{"text":"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":53},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& ($ left), & ($ right))","highlight_start":1,"highlight_end":37},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#,","highlight_start":1,"highlight_end":22},{"text":"                  & * left_val, & * right_val, $ crate :: format_args !","highlight_start":1,"highlight_end":72},{"text":"                  ($ ($ arg) +))","highlight_start":1,"highlight_end":33},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::cmp::PartialEq<std::vec::Vec<i32>>` is not implemented for `[i32]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: can't compare `[i32]` with `std::vec::Vec<i32>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:36:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(*Solution::move_zeroes_1(&mut input()), output())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno implementation for `[i32] == std::vec::Vec<i32>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::cmp::PartialEq<std::vec::Vec<i32>>` is not implemented for `[i32]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
