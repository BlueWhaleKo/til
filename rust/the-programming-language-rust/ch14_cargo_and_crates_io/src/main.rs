fn main() {
    println!("Hello, world!");
}

// 14.1 릴리즈 프로필을 이용한 빌드 커스터마이징
// 러스트에서는 릴리즈 프로필(release profiles)이 미리 정의되어 있으며
// 릴리즈 프로질 제어를 통해 코드 컴파일 과정을 자유롭게 커스터마이즈 할 수 있다.


// 14.2 crates.io 사이트에 크레이트 발행하기
// 프로젝트에 필요한 의존성 패키지는 https://crates.io/ 사이트에서 내려받을 수 있다.

/// 문서 주석은 슬래시 세 개(///)으로 시작하며 마크다운 문법을 지원한다.
/// 크레이트 작성자들은 이 외에도 문서화를 위해 다음과 같은 섹션을 사용한다.
/// Panics, Errors, Safety, Examples

// pub use 구문을 이용하면 아이템들을 최상위 수준으로 노출시킬 수 있다.
// 크레이트 사용자들은 내부 모듈 구조를 잘 모를 수 있으므로, 
// 최상위 수준으로 노출시키면 이용자가 좀 더 편리하게 이용할 수 있다.

// 12.2.4 새 크레이트의 메타데이터 추가하기
// 크레이트를 발행할 경우, Cargo.toml 파일에 [package] 섹선을 추가하여 크레이트에 대한 메타데이터를 제공해야 한다.
// [package]
// name = "guessing_game"
// license = "MIT"
// version = "0.1.0"
// authors = ["작성자 이름 <you@example.com"]
// description = "컴퓨터가 선택한 숫자를 맞히는 게임"
// edition = "2020"

// 14.2.5 crates.io에 발행하기
// 한번 발행된 크레이트는 영구적이며 삭제가 불가능하다.

// 12.2.7 cargo yank 명령을 이용해 crates.io에서 버전 제거하기
// 특정 버전에 문제가 생긴 경우, 이전 버전을 새로 의존 목록에 추가하는 것을 막을 수 있다.

// 14.3 카고 작업공간
// 특정 시점에 바이너리 크레이트의 크기가 계속 증가해 패키지를 여러 개의 라이브러리 크레이트로 나누어야 할 시기가 온다.
// 이때를 대비해 카고는 관련된 여러 개의 패키지를 관리할 수 있는 작업공간(workspaces)이라는 기능을 제공한다.

// 14.3.1 작업공간 생성하기
// 